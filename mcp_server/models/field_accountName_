# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:58:26+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class ClientProfileData(BaseModel):
    corporateDocument: Optional[str] = Field(
        None,
        description='Corporate document, if the customer is a legal entity.',
        examples=['12345678000100'],
    )
    corporateName: Optional[str] = Field(
        None,
        description='Company name, if the customer is a legal entity.',
        examples=['company-name'],
    )
    corporatePhone: Optional[str] = Field(
        None,
        description='Corporate phone number, if the customer is a legal entity.',
        examples=['+551100988887777'],
    )
    document: str = Field(
        ...,
        description='Document informed by the customer. Validation depends on the country.',
        examples=['123456789'],
    )
    documentType: str = Field(
        ...,
        description='Type of the document informed by the customer.',
        examples=['cpf'],
    )
    email: str = Field(
        ...,
        description="Customer's email address.",
        examples=['customer@examplemail.com'],
    )
    firstName: str = Field(
        ..., description="Customer's first name.", examples=['first-name']
    )
    isCorporate: Optional[bool] = Field(
        None, description='`true` if the customer is a legal entity.', examples=[False]
    )
    lastName: str = Field(
        ..., description="Customer's last name.", examples=['last-name']
    )
    phone: Optional[str] = Field(
        None, description="Customer's phone number.", examples=['+55110988887777']
    )
    stateInscription: Optional[str] = Field(
        None,
        description='State inscription, if the customer is a legal entity.',
        examples=['12345678'],
    )
    tradeName: Optional[str] = Field(
        None,
        description='Trade name, if the customer is a legal entity.',
        examples=['trade-name'],
    )


class BundleItem(BaseModel):
    id: Optional[int] = Field(None, description='Service identifier.', examples=[1034])
    name: Optional[str] = Field(
        None, description='Service name.', examples=['name-example']
    )
    price: Optional[int] = Field(
        None,
        description='Service price. The last two digits are the cents.',
        examples=[199],
    )
    type: Optional[str] = Field(
        None, description='Service type.', examples=['type-example']
    )


class ItemAttachment(BaseModel):
    content: Optional[str] = Field(
        None,
        description='Content referring to the customization requested by the customer.',
        examples=['content-example'],
    )
    name: Optional[str] = Field(
        None, description='Attachment name.', examples=['name-example']
    )


class PriceTag(BaseModel):
    identifier: Optional[str] = Field(
        None, description='Price tag identifier.', examples=['1234abc-5678b-1234c']
    )
    isPercentual: Optional[bool] = Field(
        False, description='`true` if price tag value is applied through a percentage.'
    )
    name: Optional[str] = Field(
        None,
        description='Price tag name.',
        examples=['discount@name-1234abc-5678b-1234c'],
    )
    rawValue: Optional[int] = Field(
        None, description='Price tag value.', examples=[-12]
    )
    value: Optional[int] = Field(
        None, description='Price tag raw value.', examples=[-1200]
    )


class Item(BaseModel):
    attachments: Optional[List[str]] = Field(
        None, description='Array containing information on attachments.'
    )
    bundleItems: Optional[List[BundleItem]] = Field(
        None,
        description='Information on services sold along with the SKU. Example: a gift package.',
    )
    commission: Optional[int] = Field(None, description='Comission.', examples=[10])
    freightCommission: Optional[int] = Field(
        None, description='Freight comission', examples=[10]
    )
    id: str = Field(..., description='The SKU ID.', examples=['123'])
    isGift: Optional[bool] = Field(
        False, description='Indicates whether the order is a gift.'
    )
    itemAttachment: Optional[ItemAttachment] = Field(
        None, description='Item attachment.'
    )
    measurementUnit: Optional[str] = Field(
        None, description='SKU measurement unit.', examples=['g']
    )
    price: Optional[int] = Field(
        None,
        description='Item price within the context of the order without separating cents. For example, $24.99 is represented `2499`.',
        examples=[2499],
    )
    priceTags: Optional[List[PriceTag]] = Field(
        None,
        description='Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.',
    )
    quantity: int = Field(
        ...,
        description='The quantity of items of this specific SKU in the cart to be simulated.',
        examples=[1],
    )
    seller: str = Field(
        ...,
        description='The ID of the seller responsible for this SKU. This ID can be found in your VTEX Admin.',
        examples=['1'],
    )
    unitMultiplier: Optional[int] = Field(
        None, description='SKU unit multiplier.', examples=[1]
    )


class MarketingData(BaseModel):
    utmCampaign: Optional[str] = Field(
        None, description='UTM campaign', examples=['Black friday']
    )
    utmMedium: Optional[str] = Field(None, description='UTM medium.', examples=['CPC'])
    utmSource: Optional[str] = Field(
        None, description='UTM source.', examples=['Facebook']
    )
    utmiCampaign: Optional[str] = Field(
        None,
        description='utmi_campaign (internal utm)',
        examples=['utmi_campaign-exmaple'],
    )
    utmiPage: Optional[str] = Field(
        None, description='utmi_page (internal utm)', examples=['utmi_page-example']
    )
    utmiPart: Optional[str] = Field(
        None, description='utmi_part (internal utm)', examples=['utmi_part-exmaple']
    )


class Address(BaseModel):
    addressId: Optional[str] = Field(None, description='Address ID.', examples=['Home'])
    addressType: str = Field(
        ...,
        description='Type of address. For example, `Residential` or `Pickup`, among others.',
        examples=['residential'],
    )
    city: str = Field(
        ..., description='City of the shipping address.', examples=['Rio de Janeiro']
    )
    complement: Optional[str] = Field(
        None,
        description='Complement to the shipping address in case it applies.',
        examples=['3rd floor'],
    )
    country: str = Field(
        ...,
        description='Three letter ISO code of the country of the shipping address.',
        examples=['BRA'],
    )
    geoCoordinates: Optional[List[str]] = Field(
        None,
        description='Array with two strings with geocoordinates, first latitude, then longitude.',
    )
    neighborhood: Optional[str] = Field(
        None, description='Neighborhood of the shipping address.', examples=['Botafogo']
    )
    number: str = Field(
        ...,
        description='Number of the building, house or apartment in the shipping address.',
        examples=['300'],
    )
    postalCode: str = Field(
        ...,
        description='Postal Code. Validation depends on the country.',
        examples=['12345000'],
    )
    receiverName: str = Field(
        ...,
        description='Name of the person who is going to receive the order.',
        examples=['receiver-name'],
    )
    reference: Optional[str] = Field(
        None,
        description='Complement that might help locate the shipping address more precisely in case of delivery.',
        examples=['Grey building'],
    )
    state: str = Field(
        ..., description='State of the shipping address.', examples=['Rio de Janeiro']
    )
    street: str = Field(
        ...,
        description='Street of the shipping address.',
        examples=['Praia de Botafogo'],
    )


class DeliveryWindow(BaseModel):
    endDateUtc: Optional[str] = Field(
        None,
        description='Delivery window ending day and time in UTC.',
        examples=['2021-07-13T23:59:59+00:00'],
    )
    lisPrice: Optional[int] = Field(0, description='Delivery window list price.')
    price: Optional[int] = Field(0, description='Delivery window price.')
    startDateUtc: Optional[str] = Field(
        None,
        description='Delivery window starting day and time in UTC.',
        examples=['2021-07-13T00:00:00+00:00'],
    )
    tax: Optional[int] = Field(0, description='Delivery window tax.')


class LogisticsInfoItem(BaseModel):
    deliveryWindow: Optional[DeliveryWindow] = Field(
        None,
        description='In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.',
    )
    itemIndex: int = Field(
        ...,
        description='Index of the item in the `items` array, starting from 0.',
        examples=[0],
    )
    lockTTL: Optional[str] = Field(
        None, description='Logistics reservation waiting time.', examples=['8d']
    )
    price: int = Field(
        ...,
        description="Shipping price for the item. Does not account for the whole order's shipping price.",
        examples=[1099],
    )
    selectedSla: str = Field(
        ..., description='Selected shipping option', examples=['Express']
    )
    shippingEstimate: Optional[str] = Field(
        None, description='Estimated time until delivery for the item.', examples=['7d']
    )


class ShippingData(BaseModel):
    address: Optional[Address] = Field(None, description='Shipping address.')
    logisticsInfo: Optional[List[LogisticsInfoItem]] = Field(
        None,
        description='Array of objects containing logistics information of each item.',
    )
    updateStatus: Optional[str] = Field(
        None,
        description='Indicate whether this object\'s information is up to date according to the order\'s items. An order can not be placed if `"outdated"`',
        examples=['updated'],
    )


class BrApiFulfillmentPvtOrdersPostRequest(BaseModel):
    clientProfileData: ClientProfileData = Field(
        ..., description="Customer's profile information."
    )
    isCreatedAsync: Optional[bool] = Field(
        None,
        description='Indicates whether an order is created. It must be `true` if an order is being placed with [Price divergence](https://help.vtex.com/en/tutorial/price-divergence-rule--6RlFLhD1rIRRshl83KnCjW#), otherwise the request will not work.',
        examples=[False],
    )
    items: List[Item] = Field(
        ...,
        description="Array of objects containing information on each of the order's items.",
    )
    marketingData: Optional[MarketingData] = None
    marketplaceOrderId: str = Field(
        ..., description='ID of the order in the marketplace.', examples=['123456789']
    )
    marketplacePaymentValue: int = Field(
        ..., description='Value of the payment made to the marketplace.', examples=[100]
    )
    marketplaceServicesEndpoint: str = Field(
        ...,
        description='Endpoint provided by the marketplace for post purchase communication. Should be an URL, containing protocol, host, path and query string (in case it applies).',
        examples=['https://exampleseller.marketplaceservices.com'],
    )
    openTextField: Optional[str] = Field(
        None,
        description='Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `JSON` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1)',
        examples=['open-text-example'],
    )
    paymentData: Optional[Dict[str, Any]] = Field(
        None,
        description='In other contexts, this field tipically holds an object with payment information. However, since the payment is processed by the marketplace, it will be sent to the seller as `null` in this context.',
    )
    shippingData: ShippingData = Field(..., description='Shipping information.')


class BrApiFulfillmentPvtOrdersOrderIdFulfillPostRequest(BaseModel):
    marketplaceOrderId: Optional[str] = Field(
        '123',
        description='ID of the order in the marketplace. It is the same as the `orderId` without the `afilliateId` at the beginning. For instance, if the `orderId` is `"MKP-123"`, the `marketplaceOrderId` is `"123"`.',
    )
