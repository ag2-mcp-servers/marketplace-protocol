# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:58:26+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class Error(BaseModel):
    code: str = Field(
        ...,
        description='String containing the code returned by the source. Example value: If the source is `Fulfillment`, the code can be FMT005 to indicate that the item(s) in the order are not available.',
        examples=['FMT005'],
        title='code',
    )
    description: str = Field(
        ...,
        description='String containing the error message/description returned by the source.',
        examples=['Message describing the error.'],
        title='description',
    )
    source: str = Field(
        ...,
        description='Includes the following fields pointing out the context of the error: \n\n`Fulfillment` \n\n`Checkout` \n\n`Order Integration`',
        examples=['Fulfillment'],
        title='Checkout',
    )


class Fields1(BaseModel):
    franchiseOrderId: Optional[str] = Field(
        None,
        description="String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: \n\n- `allowFranchises` field set to `true` when integrating the order \r\n- SLA chosen for the order is from a franchise account",
        examples=['432874921387409182347'],
        title='The franchiseOrderId Schema',
    )
    mainOrderId: str = Field(
        ...,
        description='String with the order’s ID inside the main seller account in VTEX.',
        examples=['MKP-123456789'],
        title='The mainOrderId Schema',
    )


class Fields(BaseModel):
    fields: Optional[Fields1] = Field(
        None,
        examples=[
            {
                'franchiseOrderId': '432874921387409182347',
                'mainOrderId': 'MKP-123456789',
            }
        ],
        title='fields',
    )


class Approveorder(BaseModel):
    accountName: str = Field(
        ...,
        description='String that indicates which account made the request.',
        examples=['accountName'],
    )
    code: str = Field(
        ...,
        description='String with a internal Channel Order API code that classifies the response. The possible values returned in this field are described in the Response Codes section of this API Reference.',
        examples=['SOI001'],
    )
    errors: List[Error] = Field(
        ..., description='List with errors related to the response, if there is any.'
    )
    fields: Fields = Field(
        ...,
        description="Structure with important fields for the connector. This structure is only returned if the response is successful. Includes the following fields: \n\n`mainOrderId`: String with the order's ID inside the main seller account in VTEX. \n\n`franchiseOrderId`: - String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: \n\n- `allowFranchises` field set to `true` when integrating the order \n\n- `SLA` chosen for the order is from a franchise account.",
        examples=[{'franchiseOrderId': '38475934875'}],
    )
    flow: str = Field(
        ...,
        description='String containing the name of the flow responsible for the response. This field can contain the following values: \n\n`PlaceOrder`: when integrating new orders. \n\n`ApproveOrder`: when approving existing orders. \n\n`Unknown`: when we’re not able to identify the flow.',
        examples=['ApproveOrder'],
    )
    marketplaceOrderId: str = Field(
        ...,
        description="String that indicates the order's ID in the marketplace.",
        examples=['7e62fcd3-827b-400d-be8a-f050a79c4976'],
    )
    message: str = Field(
        ...,
        description='String with a message explaining the code returned in the response.',
        examples=['The order was integrated into VTEX successfully'],
    )
    operationId: str = Field(
        ...,
        description='String GUID that identifies the operation in our service. This field can be used to help us analyze unexpected errors or behaviors.',
        examples=['1234567'],
    )
    success: bool = Field(
        ...,
        description='Boolean that indicates if the response is successful or not.',
        examples=[True],
    )


class ClientProfileData(BaseModel):
    corporateDocument: str = Field(
        ...,
        description='String with the company’s document number, in case of corporate orders.',
        examples=['99999999999'],
        title='corporateDocument',
    )
    corporateName: str = Field(
        ...,
        description='String with the company’s name, in case of corporate orders.',
        examples=['The Witcher Inc.'],
        title='corporateName',
    )
    corporatePhone: str = Field(
        ...,
        description='String with the company’s phone number, in case of corporate orders.',
        examples=['99999999999'],
        title='corporatePhone',
    )
    document: str = Field(
        ...,
        description='String with the customer’s document number.',
        examples=['99999999999'],
        title='The document schema',
    )
    email: str = Field(
        ...,
        description="String with the customer's email.",
        examples=['cirilla@cintra.com'],
        title='email',
    )
    firstName: str = Field(
        ...,
        description="String with the customer's first name.",
        examples=['Cirilla'],
        title='firstName',
    )
    lastName: str = Field(
        ...,
        description='String with the customer’s surname.',
        examples=['Cintra'],
        title='lastName',
    )
    phone: str = Field(
        ...,
        description='String with the customer’s phone number.',
        examples=['99999999999'],
        title='phone',
    )
    stateInscription: str = Field(
        ...,
        description='String with the company’s state registration, in case of corporate orders.',
        examples=['99999999999'],
        title='stateInscription',
    )
    tradeName: str = Field(
        ...,
        description='String with the company’s fantasy name, in case of corporate orders.',
        examples=['The Witcher'],
        title='tradeName',
    )


class DeliveryIds(BaseModel):
    warehouseId: str = Field(
        ...,
        description='String with the ID of the warehouse used for marketplace fulfillment. Required when `isFob` = `true` and `isMarketplaceFulfillment` = `true`.',
        examples=['AR1'],
    )


class Fields3(BaseModel):
    franchiseOrderId: Optional[str] = Field(
        None,
        description="String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: \n\n- `allowFranchises` field set to `true` when integrating the order \r\n- SLA chosen for the order is from a franchise account",
        examples=['432874921387409182347'],
        title='franchiseOrderId',
    )
    mainOrderId: str = Field(
        ...,
        description='String with the order’s ID inside the main seller account in VTEX.',
        examples=['MKP-123456789'],
        title='mainOrderId',
    )


class Fields2(BaseModel):
    fields: Optional[Fields3] = Field(
        None,
        examples=[
            {
                'franchiseOrderId': '432874921387409182347',
                'mainOrderId': 'MKP-123456789',
            }
        ],
        title='fields',
    )


class Deliverybyfranchiseseller(BaseModel):
    accountName: str = Field(
        ...,
        description='String that indicates which account made the request.',
        examples=['accountName'],
    )
    code: str = Field(
        ...,
        description='String with a internal Channel Order API code that classifies the response. The possible values returned in this field are described in the [Response Codes]() section.',
        examples=['SOI001'],
    )
    errors: List[Error] = Field(
        ..., description="List with errors related to the response, if there's any."
    )
    fields: Fields2 = Field(
        ...,
        description="Structure with important fields for the connector. This structure is only returned if the response is successful. Includes the following fields: \n\n`mainOrderId`: String with the order's ID inside the main seller account in VTEX. \n\n`franchiseOrderId`: - String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: \n\n- `allowFranchises` field set to `true` when integrating the order \n\n- `SLA` chosen for the order is from a franchise account.",
        examples=[{'franchiseOrderId': '38475934875'}],
    )
    flow: str = Field(
        ...,
        description='String containing the name of the flow responsible for the response. This field can contain the following values: \n\n`PlaceOrder`: when integrating new orders \n\n`ApproveOrder`: when approving existing orders \n\n`Unknown`: when we’re not able to identify the flow',
        examples=['ApproveOrder'],
    )
    marketplaceOrderId: str = Field(
        ...,
        description="String that indicates the order's ID in the marketplace.",
        examples=['7e62fcd3-827b-400d-be8a-f050a79c4976'],
    )
    message: str = Field(
        ...,
        description='String with a message explaining the code returned in the response. ',
        examples=['The order was integrated into VTEX successfully'],
    )
    operationId: str = Field(
        ...,
        description='String GUID that identifies the operation in our service. This field can be used to help us analyze unexpected errors or behaviors.',
        examples=['1234567'],
    )
    success: bool = Field(
        ...,
        description='Boolean that indicates if the response is successful or not.',
        examples=[True],
    )


class Fields5(BaseModel):
    franchiseOrderId: Optional[str] = Field(
        None,
        description="String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: \n\n- `allowFranchises` field set to `true` when integrating the order \r\n- SLA chosen for the order is from a franchise account",
        examples=['432874921387409182347'],
        title='franchiseOrderId',
    )
    mainOrderId: str = Field(
        ...,
        description='String with the order’s ID inside the main seller account in VTEX.',
        examples=['MKP-123456789'],
        title='mainOrderId',
    )


class Fields4(BaseModel):
    fields: Optional[Fields5] = Field(
        None,
        examples=[
            {
                'franchiseOrderId': '432874921387409182347',
                'mainOrderId': 'MKP-123456789',
            }
        ],
        title='fields',
    )


class Deliverybyseller(BaseModel):
    accountName: str = Field(
        ...,
        description='String that indicates which account made the request.',
        examples=['accountName'],
    )
    code: str = Field(
        ...,
        description='String with a internal Channel Order API code that classifies the response. The possible values returned in this field are described in the [Response Codes]() section.',
        examples=['SOI001'],
    )
    errors: List[Error] = Field(
        ..., description="List with errors related to the response, if there's any."
    )
    fields: Fields4 = Field(
        ...,
        description="Structure with important fields for the connector. This structure is only returned if the response is successful. Includes the following fields: \n\n`mainOrderId`: String with the order's ID inside the main seller account in VTEX. \n\n`franchiseOrderId`: - String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: \n\n- `allowFranchises` field set to `true` when integrating the order \n\n- `SLA` chosen for the order is from a franchise account.",
        examples=[{'franchiseOrderId': '38475934875'}],
    )
    flow: str = Field(
        ...,
        description='String containing the name of the flow responsible for the response. This field can contain the following values: \n\n`PlaceOrder`: when integrating new orders \n\n`ApproveOrder`: when approving existing orders \n\n`Unknown`: when we’re not able to identify the flow',
        examples=['ApproveOrder'],
    )
    marketplaceOrderId: str = Field(
        ...,
        description="String that indicates the order's ID in the marketplace.",
        examples=['7e62fcd3-827b-400d-be8a-f050a79c4976'],
    )
    message: str = Field(
        ...,
        description='String with a message explaining the code returned in the response. ',
        examples=['The order was integrated into VTEX successfully'],
    )
    operationId: str = Field(
        ...,
        description='String GUID that identifies the operation in our service. This field can be used to help us analyze unexpected errors or behaviors.',
        examples=['1234567'],
    )
    success: bool = Field(
        ...,
        description='Boolean that indicates if the response is successful or not.',
        examples=[True],
    )


class FieldsModel(BaseModel):
    marketplacePaymentMethod: str = Field(
        ...,
        description="String with field's key and value.",
        examples=['credit card'],
        title='marketplacePaymentMethod',
    )


class GeoCoordinates(BaseModel):
    latitude: str = Field(
        ...,
        description='Double value with the latitude coordinates of the address. Required only if the geoCoordinates field is defined. \n\nExample format: `-25.4158764`.',
        examples=['-25.4158764'],
        title='latitude',
    )
    longitude: str = Field(
        ...,
        description='Double value with the longitude coordinates of the address. Required only if the geoCoordinates field is defined. Example format: `-49.342759`.',
        examples=['-49.342759'],
        title='longitude',
    )


class Item(BaseModel):
    id: str = Field(
        ...,
        description='String with the SKU ID in VTEX’s catalog.',
        examples=['1'],
        title='id',
    )
    price: int = Field(
        ...,
        description='Integer with the SKU’s unit price. If the value is `USD110.50`, convert it to the format → `11050`.',
        examples=[11050],
        title='price',
    )
    quantity: int = Field(
        ...,
        description='Integer with the quantity of the SKU present in the order. The value should be greater than zero.',
        examples=[10],
        title='quantity',
    )


class LogisticsInfo(BaseModel):
    deliveryIds: DeliveryIds
    lockTTL: str = Field(
        ...,
        description="String with the inventory reservation period in VTEX's logistics system. To fill in this field insert the number of days, followed by the letter for the chosen unit. \n\n- Days: `d` \n\n- Business days: `bd`. \n\nExample formats: `12d`, `5d`.",
        examples=['5d'],
        title='lockTTL',
    )
    price: int = Field(
        ...,
        description='Integer indicating the shipping price for this SKU. If the value is `USD20.50`, convert it to the format → `2050`.',
        examples=[2050],
        title='price',
    )
    selectedDeliveryChannel: str = Field(
        ...,
        description='String with the selected delivery channel. This field supports the following values:  \n\n- `delivery`,  \n\n- `pickup-in-point`.',
        examples=['delivery'],
        title='selectedDeliveryChannel',
    )
    selectedSla: str = Field(
        ...,
        description='String with the selected delivery SLA.',
        examples=['T-G1-2-Express'],
        title='selectedSla',
    )
    shippingEstimate: str = Field(
        ...,
        description="String with the order's estimated delivery time. To fill in this field, insert a number,  followed by the letter for the chosen unit. \n\n- Days: `d` \n\n- Business days: `bd`. \n\n- Hours: `h` \n\n- Minutes: `m`. \n\nExample formats: `12d`, `5bd`, `3h`, `50m`.",
        examples=['7d'],
        title='shippingEstimate',
    )


class Fields7(BaseModel):
    franchiseOrderId: Optional[str] = Field(
        None,
        description="String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: \n\n- `allowFranchises` field set to `true` when integrating the order \r\n- SLA chosen for the order is from a franchise account",
        examples=['432874921387409182347'],
        title='The franchiseOrderId Schema',
    )
    mainOrderId: str = Field(
        ...,
        description="String with the order's ID inside the main seller account in VTEX.",
        examples=['MKP-123456789'],
        title='mainOrderId',
    )


class Fields6(BaseModel):
    fields: Optional[Fields7] = Field(
        None,
        examples=[
            {
                'franchiseOrderId': '432874921387409182347',
                'mainOrderId': 'MKP-123456789',
            }
        ],
        title='fields',
    )


class PickupInPoint(BaseModel):
    accountName: str = Field(
        ...,
        description='String that indicates which account made the request.',
        examples=['accountName'],
    )
    code: str = Field(
        ...,
        description='String with a internal Channel Order API code that classifies the response. The possible values returned in this field are described in the [Response Codes]() section.',
        examples=['SOI001'],
    )
    errors: List[Error] = Field(
        ..., description="List with errors related to the response, if there's any."
    )
    fields: Fields6 = Field(
        ...,
        description="Structure with important fields for the connector. This structure is only returned if the response is successful. Includes the following fields: \n\n`mainOrderId`: String with the order's ID inside the main seller account in VTEX. \n\n`franchiseOrderId`: - String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: \n\n- `allowFranchises` field set to `true` when integrating the order \n\n- `SLA` chosen for the order is from a franchise account.",
        examples=[{'franchiseOrderId': '38475934875'}],
    )
    flow: str = Field(
        ...,
        description='String containing the name of the flow responsible for the response. This field can contain the following values: \n\n`PlaceOrder`: when integrating new orders \n\n`ApproveOrder`: when approving existing orders \n\n`Unknown`: when we’re not able to identify the flow',
        examples=['ApproveOrder'],
    )
    marketplaceOrderId: str = Field(
        ...,
        description="String that indicates the order's ID in the marketplace.",
        examples=['7e62fcd3-827b-400d-be8a-f050a79c4976'],
    )
    message: str = Field(
        ...,
        description='String with a message explaining the code returned in the response. ',
        examples=['The order was integrated into VTEX successfully'],
    )
    operationId: str = Field(
        ...,
        description='String GUID that identifies the operation in our service. This field can be used to help us analyze unexpected errors or behaviors.',
        examples=['1234567'],
    )
    success: bool = Field(
        ...,
        description='Boolean that indicates if the response is successful or not.',
        examples=[True],
    )


class Fields9(BaseModel):
    franchiseOrderId: Optional[str] = Field(
        None,
        description="String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: \n\n- `allowFranchises` field set to `true` when integrating the order \r\n- SLA chosen for the order is from a franchise account",
        examples=['432874921387409182347'],
        title='The franchiseOrderId Schema',
    )
    mainOrderId: str = Field(
        ...,
        description='String with the order’s ID inside the main seller account in VTEX.',
        examples=['MKP-123456789'],
        title='The mainOrderId Schema',
    )


class Fields8(BaseModel):
    fields: Optional[Fields9] = Field(
        None,
        examples=[
            {
                'franchiseOrderId': '432874921387409182347',
                'mainOrderId': 'MKP-123456789',
            }
        ],
        title='fields',
    )


class PickupInPointfranchise(BaseModel):
    accountName: str = Field(
        ...,
        description='String that indicates which account made the request.',
        examples=['accountName'],
    )
    code: str = Field(
        ...,
        description='String with a internal Channel Order API code that classifies the response. The possible values returned in this field are described in the [Response Codes]() section.',
        examples=['SOI001'],
    )
    errors: List[Error] = Field(
        ..., description="List with errors related to the response, if there's any."
    )
    fields: Fields8 = Field(
        ...,
        description="Structure with important fields for the connector. This structure is only returned if the response is successful. Includes the following fields: \n\n`mainOrderId`: String with the order's ID inside the main seller account in VTEX. \n\n`franchiseOrderId`: - String with the order's ID inside the franchise seller account in VTEX. Only returned if the order was integrated using the [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) feature, that is: \n\n- `allowFranchises` field set to `true` when integrating the order \n\n- `SLA` chosen for the order is from a franchise account.",
        examples=[{'franchiseOrderId': '38475934875', 'mainOrderId': 'MKP-123456789'}],
    )
    flow: str = Field(
        ...,
        description='String containing the name of the flow responsible for the response. This field can contain the following values: \n\n`PlaceOrder`: when integrating new orders \n\n`ApproveOrder`: when approving existing orders \n\n`Unknown`: when we’re not able to identify the flow',
        examples=['ApproveOrder'],
    )
    marketplaceOrderId: str = Field(
        ...,
        description="String that indicates the order's ID in the marketplace.",
        examples=['7e62fcd3-827b-400d-be8a-f050a79c4976'],
    )
    message: str = Field(
        ...,
        description='String with a message explaining the code returned in the response. ',
        examples=['The order was integrated into VTEX successfully'],
    )
    operationId: str = Field(
        ...,
        description='String GUID that identifies the operation in our service. This field can be used to help us analyze unexpected errors or behaviors.',
        examples=['1234567'],
    )
    success: bool = Field(
        ...,
        description='Boolean that indicates if the response is successful or not.',
        examples=[True],
    )


class SelectedAddress(BaseModel):
    addressId: str = Field(
        ...,
        description='String with the address identifier. Optional for `delivery` type orders, and required for `pickup-in-point` orders.',
        examples=['1'],
        title='addressId',
    )
    addressType: str = Field(
        ...,
        description='String with the address type. The field supports the values: `residential`, `commercial`, `pickup`.',
        examples=['commercial'],
        title='addressType',
    )
    city: Optional[str] = Field(
        None,
        description='String with the city’s name.',
        examples=['City'],
        title='city',
    )
    complement: Optional[str] = Field(
        None,
        description="String with the address' complement, like building name, or extra number.",
        examples=['Complement to address'],
        title='complement',
    )
    country: str = Field(
        ...,
        description="String with the state's name, filled in with three letter code.",
        examples=['BRA'],
        title='country',
    )
    geoCoordinates: Optional[GeoCoordinates] = None
    neighborhood: Optional[str] = Field(
        None,
        description="String with the neighborhood's name.",
        examples=["Neighborhood's name"],
        title='The neighborhood schema',
    )
    number: Optional[str] = Field(
        None,
        description="String with the street's number.",
        examples=['1986'],
        title='The number',
    )
    postalCode: str = Field(
        ...,
        description="String with the address' postal code.",
        examples=['81020-235'],
        title='postalCode',
    )
    receiverName: str = Field(
        ...,
        description='String with the name of the person responsible for receiving the order.',
        examples=['Yennefer of Vengerberg'],
        title='receiverName',
    )
    state: Optional[str] = Field(
        None,
        description="String with the state's name, filled in with two letter code.",
        examples=['RJ'],
        title='state',
    )
    street: Optional[str] = Field(
        None,
        description="String with the street's name.",
        examples=['The Witcher Avenue'],
        title='street',
    )


class ShippingData(BaseModel):
    isFob: bool = Field(
        ...,
        description="Boolean that indicates whether the order's delivery is the marketplace responsibility. Optional, defaulting to false.",
        examples=[False],
        title='isFob',
    )
    isMarketplaceFulfillment: bool = Field(
        ...,
        description="Boolean that indicates whether the order's inventory in warehouse is the marketplace's responsibility. Optional, defaulting to false.",
        examples=[False],
        title='isMarketplaceFulfillment',
    )
    logisticsInfo: List[LogisticsInfo] = Field(
        ...,
        description='List that references the SLAs responsible for delivering each item in the order.  \n\nThis list must contain the same number of items as the `items` list, previously defined. For example: if the order contains 3 SKUs, you must describe 3 SLAs in this list, one for each SKU (even in cases where the same SLA will deliver all of them).  \n\nThe order of the SLAs in this list must also follow the same order as in the `items` list. For example: if the SLA named **Correios Express** will be responsible for delivering the SKU with ID equal to **1015**, which is found at index 0 of the `items` list, it must be in index 0 of the `logisticsInfo` list as well.',
    )
    selectedAddresses: List[SelectedAddress] = Field(..., description='')


class UpdateOrderStatusRequest(BaseModel):
    connectorEndpoint: str = Field(
        ...,
        description="String with the connector's base endpoint that will receive notifications about the orders processing results, as well as status updates from VTEX OMS. This field does not accept query strings. You can use the models below:  \n\n- `https://{{externalconnector}}.com`  \n\n- `https://{{externalconnector.com}}/api/vtex` if you additionaly want to send a relative URL with the endpoint. \n\nThis field is optional if the connector uses the [App Template](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-app-template) and authenticates on our request via `VtexIdclientAutCookie`.  \n\nIt is required if the connector is native or does not use the App Template.",
        examples=['https://{{externalconnector.com}}/api/vtex'],
        title='connectorEndpoint',
    )
    connectorName: str = Field(
        ...,
        description='String with the identifier code of the connector responsible for the order.  \n\nThis field is optional if the connector uses the [App Template](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-app-template) and authenticates on our request via `VtexIdclientAutCookie`.  \n\nIt is required if the connector is native or does not use the App Template.',
        examples=['connectorName'],
        title='connectorName',
    )
    marketplaceOrderId: str = Field(
        ...,
        description="String that indicates the order's ID in the marketplace.",
        examples=['7e62fcd3-827b-400d-be8a-f050a79c4976'],
    )
    marketplaceOrderStatus: str = Field(
        ...,
        description='Required field including a string with the order’s status in the marketplace. If you send an order with the status APPROVED to integrate, our service will automatically try to advance its status in VTEX after integrating it. This field accepts the following values:  \n\n- `new`  \n\n- `approved`.',
        examples=['new'],
        title='marketplaceOrderStatus',
    )


class UserPaymentInfo(BaseModel):
    paymentMethods: List[str] = Field(
        ...,
        description='List of strings with the payment methods used in the order. Required only if invoiceData is defined. The format and some possible values of payment methods accepted in this list can be found in the call [Fetching marketplace information with the Orders API](https://developers.vtex.com/vtex-rest-api/docs/get-marketplace-data-orders-api).',
        examples=[['creditCardPaymentGroup']],
    )


class Property(BaseModel):
    allowsRemap: Optional[bool] = Field(
        None,
        description='Allows rempaping categories in case the marketplace or seller tree is altered. If marked as `true`, all trees will be remapped.',
        examples=[False],
    )


class Properties(BaseModel):
    pass


class VtexMapperRegistration(BaseModel):
    CategoryTreeProcessingNotificationEndpoint: Optional[str] = Field(
        None,
        description="The `CategoryTreeProcessingNotificationEndpoint` is optional, and should be an endpoint from the external marketplace, that will be notified after the marketplace's category tree is successfully processed or not.",
        examples=['https://CategoryTreeProcessingNotificationEndpoint.com/api'],
    )
    categoryTreeEndPoint: str = Field(
        ...,
        description='Endpoint that returns categories and attributes according to VTEX  Mapper specifications.',
        examples=[
            'http://api.vtexinternal.com.br/api/{{marketplaceName}}/mapper/categories'
        ],
    )
    displayName: str = Field(
        ...,
        description='Marketplace Name, that will be displayed in VTEX Mapper.',
        examples=['Marketplace A'],
    )
    mappingEndPoint: str = Field(
        ...,
        description='Secure endpoint that will receive the category mapping sent by VTEX Mapper.',
        examples=[
            'http://api.vtexinternal.com.br/api/{{marketplaceName}}/mapper/mapping'
        ],
    )
    properties: Union[List[Property], Properties] = Field(
        ..., description='Refers to the `allowsRemap` property.'
    )


class BundleItemsItem(BaseModel):
    id: Optional[int] = Field(None, description='Service identifier.', examples=[7436])
    name: Optional[str] = Field(None, description='Service name.', examples=['name'])
    price: Optional[int] = Field(
        None,
        description='Service price. The last two digits are the cents.',
        examples=[10],
    )
    type: Optional[str] = Field(None, description='Service type.', examples=['type'])


class FulfillmentItem(BaseModel):
    id: str = Field(..., description='SKU ID.', examples=['6'])
    quantity: int = Field(
        ..., description='Quantity of items of the SKU in the cart.', examples=[1]
    )
    seller: str = Field(
        ..., description='ID of the seller registered in VTEX.', examples=['01']
    )


class ItemAttachment(BaseModel):
    content: Optional[str] = Field(
        None,
        description='Content referring to the customization requested by the customer.',
        examples=['content-example'],
    )
    name: Optional[str] = Field(
        None, description='Attachment name.', examples=['name-example']
    )


class ClientProfileData1(BaseModel):
    corporateDocument: Optional[str] = Field(
        None,
        description='Corporate document, if the customer is a legal entity.',
        examples=['12345678000100'],
    )
    corporateName: Optional[str] = Field(
        None,
        description='Company name, if the customer is a legal entity.',
        examples=['company-name'],
    )
    corporatePhone: Optional[str] = Field(
        None,
        description='Corporate phone number, if the customer is a legal entity.',
        examples=['+551100988887777'],
    )
    document: str = Field(
        ...,
        description='Document number informed by the customer.',
        examples=['123456789'],
    )
    documentType: str = Field(
        ...,
        description='Type of the document informed by the customer.',
        examples=['cpf'],
    )
    email: str = Field(
        ...,
        description="Customer's email address.",
        examples=['customer@examplemail.com'],
    )
    firstName: str = Field(
        ..., description="Customer's first name.", examples=['first-name']
    )
    isCorporate: bool = Field(
        ..., description='`true` if the customer is a legal entity.'
    )
    lastName: str = Field(
        ..., description="Customer's last name.", examples=['last-name']
    )
    phone: Optional[str] = Field(
        None, description="Customer's phone number.", examples=['+55110988887777']
    )
    stateInscription: Optional[str] = Field(
        None,
        description='State inscription, if the customer is a legal entity.',
        examples=['12345678'],
    )
    tradeName: Optional[str] = Field(
        None,
        description='Trade name, if the customer is a legal entity.',
        examples=['trade-name'],
    )


class PriceTag(BaseModel):
    identifier: Optional[str] = Field(
        None, description='Price tag identifier.', examples=['1234abc-5678b-1234c']
    )
    isPercentual: Optional[bool] = Field(
        None,
        description='`true` if price tag value is applied through a percentage.',
        examples=[False],
    )
    name: Optional[str] = Field(
        None,
        description='Price tag name.',
        examples=['discount@name-1234abc-5678b-1234c'],
    )
    rawValue: Optional[int] = Field(
        None, description='Price tag value.', examples=[-12]
    )
    value: Optional[int] = Field(
        None, description='Price tag raw value.', examples=[-1200]
    )


class Item1(BaseModel):
    attachments: Optional[List] = Field(
        None, description='Array containing information on attachments.'
    )
    bundleItems: Optional[List[BundleItemsItem]] = Field(
        None,
        description='Information on services sold along with the SKU. Example: a gift package.',
    )
    commission: Optional[int] = Field(None, description='Comission.', examples=[0])
    freightCommission: Optional[int] = Field(
        None, description='Freight comission.', examples=[0]
    )
    id: Optional[str] = Field(None, description='SKU ID.', examples=['123456789abc'])
    isGift: Optional[bool] = Field(None, description='`true` if the item is a gift.')
    itemsAttachment: Optional[List[ItemAttachment]] = Field(
        None, description='Attachments sold with the SKU.'
    )
    measurementUnit: Optional[str] = Field(
        None, description='SKU measurement unit.', examples=['g']
    )
    price: Optional[int] = Field(
        None,
        description='SKU price. The last two digits are the cents. For example, $24.99 is represented 2499.',
        examples=[2499],
    )
    priceTags: Optional[List[PriceTag]] = Field(
        None,
        description='Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.',
    )
    quantity: Optional[int] = Field(
        None, description='Quantity of the item.', examples=[1]
    )
    seller: Optional[str] = Field(
        None,
        description='ID of the seller registered in VTEX.',
        examples=['seller-example'],
    )
    unitMultiplier: Optional[int] = Field(
        None, description='SKU unit multiplier.', examples=[1]
    )


class MarketingData(BaseModel):
    utmCampaign: Optional[str] = Field(
        None, description='UTM campaign', examples=['Black friday']
    )
    utmMedium: Optional[str] = Field(None, description='UTM medium.', examples=['CPC'])
    utmSource: Optional[str] = Field(
        None, description='UTM source.', examples=['Facebook']
    )
    utmiCampaign: Optional[str] = Field(
        None,
        description='utmi_campaign (internal utm)',
        examples=['utmi_campaign-exmaple'],
    )
    utmiPage: Optional[str] = Field(
        None, description='utmi_page (internal utm)', examples=['utmi_page-example']
    )
    utmiPart: Optional[str] = Field(
        None, description='utmi_part (internal utm)', examples=['utmi_part-exmaple']
    )


class Address(BaseModel):
    addressId: Optional[str] = Field(None, description='Address ID.', examples=['Home'])
    addressType: str = Field(
        ...,
        description='Type of address. For example, `Residential` or `Pickup`, among others.',
        examples=['residential'],
    )
    city: str = Field(
        ..., description='City of the shipping address.', examples=['Rio de Janeiro']
    )
    complement: Optional[str] = Field(
        None,
        description='Complement to the shipping address in case it applies.',
        examples=['3rd floor'],
    )
    country: str = Field(
        ...,
        description='Three letter ISO code of the country of the shipping address.',
        examples=['BRA'],
    )
    geoCoordinates: Optional[List[str]] = Field(
        None,
        description='Array with two strings with geocoordinates, first latitude, then longitude.',
    )
    neighborhood: str = Field(
        ..., description='Neighborhood of the shipping address.', examples=['Botafogo']
    )
    number: str = Field(
        ...,
        description='Number of the building, house or apartment in the shipping address.',
        examples=['300'],
    )
    postalCode: str = Field(..., description='Postal Code.', examples=['12345-000'])
    receiverName: str = Field(
        ...,
        description='Name of the person who is going to receive the order.',
        examples=['receiver-name'],
    )
    reference: Optional[str] = Field(
        None,
        description='Complement that might help locate the shipping address more precisely in case of delivery.',
        examples=['Grey building'],
    )
    state: str = Field(
        ..., description='State of the shipping address.', examples=['Rio de Janeiro']
    )
    street: str = Field(
        ...,
        description='Street of the shipping address.',
        examples=['Praia de Botafogo'],
    )


class DeliveryWindow(BaseModel):
    endDateUtc: Optional[str] = Field(
        None,
        description='Scheduled delivery window end date in UTC.',
        examples=['2016-04-20T12:00:00+00:00'],
    )
    listPrice: Optional[float] = Field(
        None, description='Scheduled delivery window list price.', examples=[10]
    )
    startDateUtc: Optional[str] = Field(
        None,
        description='Scheduled delivery window start date in UTC.',
        examples=['2016-04-20T08:00:00+00:00'],
    )


class LogisticsInfoItem(BaseModel):
    deliveryWindow: Optional[DeliveryWindow] = Field(
        None,
        description='Scheduled delivery window information, in case it applies to the item.',
    )
    itemIndex: int = Field(
        ...,
        description='Index of the item in the `items` array, starting from 0.',
        examples=[0],
    )
    lockTTL: Optional[str] = Field(
        None, description='Logistics reservation waiting time.', examples=['8d']
    )
    price: int = Field(
        ...,
        description="Shipping price for the item. Does not account for the whole order's shipping price.",
        examples=[1099],
    )
    selectedSla: str = Field(
        ..., description='Selected shipping option', examples=['Express']
    )
    shippingEstimate: Optional[str] = Field(
        None, description='Estimated time until delivery for the item.', examples=['7d']
    )


class ShippingData1(BaseModel):
    address: Optional[Address] = Field(None, description='Shipping address.')
    logisticsInfo: Optional[List[LogisticsInfoItem]] = Field(
        None,
        description='Array of objects containing logistics information of each item.',
    )
    updateStatus: Optional[str] = Field(
        None,
        description='Indicate whether this object\'s information is up to date according to the order\'s items. An order can not be placed if `"outdated"`',
        examples=['updated'],
    )


class OrderPlacement(BaseModel):
    clientProfileData: Optional[ClientProfileData1] = Field(
        None, description="Customer's profile information."
    )
    items: Optional[List[Item1]] = Field(
        None, description='Array of objects containing data about each SKU in the cart.'
    )
    marketingData: Optional[MarketingData] = Field(
        None,
        description='Marketing tracking data. If the order has no tracking data, the value will be `null`.',
    )
    marketplaceOrderId: Optional[str] = Field(
        None,
        description='Identifies the order in the marketplace.',
        examples=['1138342255777-01'],
    )
    marketplacePaymentValue: Optional[int] = Field(
        None,
        description='Amount that the marketplace agrees to pay to the seller. The last two digits are the cents. For example, $24.99 is represented 2499.',
        examples=[2499],
    )
    marketplaceServicesEndpoint: Optional[str] = Field(
        None,
        description='Endpoint sent by VTEX to the seller, that will be used to send the invoice and tracking data to the marketplace. This endpoint will also be used in [change order in Multilevel Omnichannel Inventory](https://developers.vtex.com/docs/guides/change-orders-multilevel-omnichannel-inventory-external-marketplaces#implementators) operations in external marketplaces.',
        examples=['https://marketplaceservicesendpoint.myvtex.com/'],
    )
    openTextField: Optional[str] = Field(
        None,
        description='Optional field meant to hold additional information about the order. We recommend using this field for text, not data formats such as `json` even if escaped. For that purpose, see [Creating customizable fields](https://developers.vtex.com/vtex-rest-api/docs/creating-customizable-fields-in-the-cart-with-checkout-api-1)',
        examples=['open-text-example'],
    )
    paymentData: Optional[Dict[str, Any]] = Field(
        None,
        description='In other contexts, this field tipically holds an object with payment information. However, since the payment is processed by the marketplace, it will be sent to the seller as `null` in this context.',
    )
    shippingData: Optional[ShippingData1] = Field(
        None, description='Shipping information.'
    )


class AttributeValue(BaseModel):
    valueName: str = Field(..., description='Name of the value', title='valueName')


class Specification(BaseModel):
    attributeName: str = Field(
        ...,
        description='Name of the attribute sent as a specification.',
        title='attributeName',
    )
    attributeValues: List[AttributeValue] = Field(
        ..., description='Values of the atttribute specified.', title='attributeValues'
    )
    required: bool = Field(
        ...,
        description='If the specification is required, mark this flag as `true`. If not, mark it as `false`.',
        title='required',
    )


class Child(BaseModel):
    children: List = Field(
        ...,
        description='Grandchildren categories in the marketplace. Send as array of `ID`, `name` and `specifications`.',
        title='children',
    )
    id: str = Field(
        ..., description='ID of the child  category in the marketplace.', title='id'
    )
    name: str = Field(
        ..., description='Name of the child  category in the marketplace.', title='name'
    )
    specifications: List[Specification] = Field(
        ..., description='Specifications for the Product or SKU', title='specifications'
    )


class Category(BaseModel):
    children: Optional[List[Child]] = Field(
        [],
        description='Array with children categories in the marketplace, and their information.',
        title='chidren',
    )
    id: Optional[str] = Field(
        '1', description='ID of the parent category in the marketplace.', title='id'
    )
    name: Optional[str] = Field(
        'Appliances',
        description='Name of the parent category in the marketplace.',
        title='name',
    )


class SendCategoryMappingToVtexMapper(BaseModel):
    categories: List[Category] = Field(
        ...,
        description='Array with Marketplace parent categories and their information.',
        title='',
    )


class ClientProfileData2(BaseModel):
    corporateDocument: Optional[str] = Field(
        None, description='Corporate document, if the customer is a legal entity.'
    )
    corporateName: Optional[str] = Field(
        None, description='Company name, if the customer is a legal entity.'
    )
    corporatePhone: Optional[str] = Field(
        None, description='Corporate phone number, if the customer is a legal entity.'
    )
    customerClass: Optional[str] = Field(None, description='Customer class.')
    document: Optional[str] = Field(
        None, description='Document informed by the customer.', examples=['12345678900']
    )
    documentType: Optional[str] = Field(
        None,
        description='Type of the document informed by the customer.',
        examples=['cpf'],
    )
    email: Optional[str] = Field(
        None, description='Email address.', examples=['clark.kent@example.com']
    )
    firstName: Optional[str] = Field(
        None, description='First name.', examples=['Clark']
    )
    isCorporate: Optional[bool] = Field(
        None, description='Indicates whether the customer is a legal entity.'
    )
    lastName: Optional[str] = Field(None, description='Last name.', examples=['Kent'])
    phone: Optional[str] = Field(
        None, description='Phone number.', examples=['+552199999999']
    )
    profileCompleteOnLoading: Optional[bool] = Field(
        None, description='Indicates whether profile is complete on loading.'
    )
    profileErrorOnLoading: Optional[bool] = Field(
        None, description='Indicates whether profile presents error on loading.'
    )
    stateInscription: Optional[str] = Field(
        None, description='State inscription, if the customer is a legal entity.'
    )
    tradeName: Optional[str] = Field(
        None, description='Trade name, if the customer is a legal entity.'
    )


class Item2(BaseModel):
    id: Optional[str] = Field(None, description='The SKU ID.', examples=['1'])
    quantity: Optional[int] = Field(
        None,
        description='The quantity of items of this specific SKU in the cart to be simulated.',
        examples=[1],
    )
    seller: Optional[str] = Field(
        None,
        description='The ID of the seller responsible for this SKU. This ID can be found in your VTEX Admin.',
        examples=['1'],
    )


class MarketingData1(BaseModel):
    coupon: Optional[str] = Field(
        'free-shipping',
        description='Sending an existing coupon code in this field will return the corresponding discount in the purchase. Use the [cart simulation](https://developers.vtex.com/vtex-rest-api/reference/orderform#orderformsimulation) request to check which coupons might apply before placing the order.',
    )
    utmCampaign: Optional[str] = Field('Black friday', description='UTM campaign')
    utmMedium: Optional[str] = Field('CPC', description='UTM medium.')
    utmSource: Optional[str] = Field('Facebook', description='UTM source.')
    utmiCampaign: Optional[str] = Field(
        'utmi_campaign-example', description='utmi_campaign (internal utm).'
    )
    utmiPage: Optional[str] = Field(
        'utmi_page-example', description='utmi_page (internal utm).'
    )
    utmiPart: Optional[str] = Field(
        'utmi_part-example', description='utmi_part (internal utm).'
    )


class ApiCheckoutPubOrderFormsSimulationPostRequest(BaseModel):
    clientProfileData: Optional[ClientProfileData2] = Field(
        None, description="Customer's profile information."
    )
    country: Optional[str] = Field(
        None,
        description='Three letter ISO code of the country of the shipping address. This value must be sent along with the `postalCode` or `geoCoordinates` values.',
        examples=['BRA'],
    )
    geoCoordinates: Optional[List[float]] = Field(
        [-47.924747467041016, -15.832582473754883],
        description='Array containing two floats with geocoordinates, first longitude, then latitude.',
    )
    isCheckedIn: Optional[bool] = Field(
        False, description='Indicates whether order is checked in.'
    )
    items: Optional[List[Item2]] = Field(
        None,
        description='Array containing information about the SKUs inside the cart to be simulated.',
    )
    marketingData: Optional[MarketingData1] = Field(
        None,
        description='Object containing promotion data such as coupon tracking information and internal or external UTMs.',
    )
    postalCode: Optional[str] = Field(
        None, description='Postal code.', examples=['12345-000']
    )
    selectedSla: Optional[str] = Field(
        None, description='SLA selected by the customer.', examples=['Normal']
    )
    storeId: Optional[str] = Field(None, description='ID of the store.')


class SellingPrice(BaseModel):
    quantity: Optional[int] = Field(
        None,
        description='Rounding quantity, meaning how many items are rounded to this value.',
    )
    value: Optional[int] = Field(
        None, description='Value in cents for that specific rounding.'
    )


class PriceDefinition(BaseModel):
    calculatedSellingPrice: Optional[int] = Field(
        None, description="Item's calculated unitary selling price in cents."
    )
    sellingPrices: Optional[List[SellingPrice]] = Field(
        None,
        description='Array of objects, each containing value (in cents) and quantity for the different rounding instances that can be combined to form the correctly rounded total.',
    )
    total: Optional[int] = Field(
        None, description='Total value for all units of the item in cents.'
    )


class PriceTag1(BaseModel):
    identifier: Optional[str] = Field(None, description='Price tag identifier.')
    isPercentual: Optional[bool] = Field(
        None,
        description='Indicates whether price tag value is applied through a percentage.',
    )
    name: Optional[str] = Field(None, description='Price tag name.')
    owner: Optional[str] = Field(
        None, description='Identification of the responsible for the price tag.'
    )
    rawValue: Optional[int] = Field(None, description='Price tag raw value.')
    value: Optional[int] = Field(None, description='Price tag value.')


class Item3(BaseModel):
    availability: Optional[str] = Field(None, description='Availability.')
    id: Optional[str] = Field(None, description='ID of the item.')
    listPrice: Optional[int] = Field(None, description='List price in cents.')
    measurementUnit: Optional[str] = Field(None, description='Measurement unit.')
    offerings: Optional[List] = Field(
        None, description='Array containing offering information.'
    )
    parentAssemblyBinding: Optional[str] = Field(
        None, description='Parent assembly binding.'
    )
    parentItemIndex: Optional[int] = Field(None, description='Parent item index.')
    price: Optional[int] = Field(None, description='Price in cents.')
    priceDefinition: Optional[PriceDefinition] = Field(
        None, description='Price information for all units of a specific item.'
    )
    priceTags: Optional[List[PriceTag1]] = Field(
        None,
        description='Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.',
    )
    priceValidUntil: Optional[str] = Field(
        None, description='Price expiration date and time.'
    )
    quantity: Optional[int] = Field(
        None, description='The quantity of the item the cart.'
    )
    requestIndex: Optional[int] = Field(None, description='Request index information.')
    rewardValue: Optional[int] = Field(None, description='Reward value in cents.')
    seller: Optional[str] = Field(
        None, description='The seller responsible for the SKU.'
    )
    sellerChain: Optional[List[str]] = Field(
        None,
        description='Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.',
    )
    sellingPrice: Optional[int] = Field(
        None,
        description='Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.',
    )
    tax: Optional[int] = Field(None, description='Tax value in cents.')
    unitMultiplier: Optional[int] = Field(None, description='Unit multiplier.')


class DeliveryChannel(BaseModel):
    id: Optional[str] = Field(None, description='Delivery channel ID.')


class AssemblyOptions(BaseModel):
    composition: Optional[str] = Field(None, description='Composition information.')
    id: Optional[str] = Field(None, description='Item ID.')
    inputValues: Optional[Dict[str, Any]] = Field(
        None, description='Input values information.'
    )
    name: Optional[str] = Field(None, description='Item name.')
    required: Optional[bool] = Field(
        None, description='Indicates whether the item is required.'
    )


class Item4(BaseModel):
    assemblyOptions: Optional[Union[List, AssemblyOptions]] = Field(
        None, description='Assembly options information.'
    )
    id: Optional[str] = Field(None, description='Item ID.')
    seller: Optional[str] = Field(None, description='Seller.')


class ItemMetadata(BaseModel):
    items: Optional[List[Item4]] = Field(
        None,
        description='List of objects containing metadata on each item in the order.',
    )


class AvailableDeliveryWindows(BaseModel):
    endDateUtc: Optional[str] = Field(
        None, description='Delivery window ending day and time in UTC.'
    )
    lisPrice: Optional[int] = Field(None, description='Delivery window list price.')
    price: Optional[int] = Field(None, description='Delivery window price.')
    startDateUtc: Optional[str] = Field(
        None, description='Delivery window starting day and time in UTC.'
    )
    tax: Optional[int] = Field(None, description='Delivery window tax.')


class DeliveryId(BaseModel):
    courierId: Optional[str] = Field(None, description='Courier ID.')
    courierName: Optional[str] = Field(None, description='Courier name.')
    dockId: Optional[str] = Field(None, description='Warehouse ID.')
    quantity: Optional[int] = Field(None, description='Quantity.')
    warehouseId: Optional[str] = Field(None, description='Warehouse ID.')


class DeliveryWindow1(BaseModel):
    endDateUtc: Optional[str] = Field(
        None, description='Delivery window ending day and time in UTC.'
    )
    lisPrice: Optional[int] = Field(None, description='Delivery window list price.')
    price: Optional[int] = Field(None, description='Delivery window price.')
    startDateUtc: Optional[str] = Field(
        None, description='Delivery window starting day and time in UTC.'
    )
    tax: Optional[int] = Field(None, description='Delivery window tax.')


class PickupStoreInfo(BaseModel):
    additionalInfo: Optional[str] = Field(None, description='Additional information.')
    address: Optional[Dict[str, Any]] = Field(None, description='Address information.')
    dockId: Optional[str] = Field(None, description='Corresponding dock ID.')
    friendlyName: Optional[str] = Field(None, description='Friendly name.')
    isPickupStore: Optional[bool] = Field(
        None, description='Indicates whether it is the pickup store.'
    )


class Sla(BaseModel):
    availableDeliveryWindows: Optional[AvailableDeliveryWindows] = Field(
        None,
        description='This object contains information about the delivery window available to the shopper.',
    )
    deliveryChannel: Optional[str] = Field(None, description='Delivery channel.')
    deliveryIds: Optional[List[DeliveryId]] = Field(
        None, description='Information on each delivery ID.'
    )
    deliveryWindow: Optional[DeliveryWindow1] = Field(
        None,
        description='In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.',
    )
    id: Optional[str] = Field(None, description='SLA ID.')
    listPrice: Optional[int] = Field(None, description='List price in cents.')
    lockTTL: Optional[str] = Field(None, description='Estimate date of delivery.')
    name: Optional[str] = Field(None, description='SLA name.')
    pickupDistance: Optional[int] = Field(None, description='Pickup point distance.')
    pickupPointId: Optional[str] = Field(None, description='Pickup point ID.')
    pickupStoreInfo: Optional[PickupStoreInfo] = Field(
        None, description='Information on the pickup store.'
    )
    polygonName: Optional[str] = Field(None, description='Polygon name.')
    price: Optional[int] = Field(None, description='Price in cents.')
    shippingEstimate: Optional[str] = Field(
        None,
        description='Shipping estimate. For instance, "three business days" will be represented as `3bd`.',
    )
    shippingEstimateDate: Optional[str] = Field(
        None, description='Shipping estimate date.'
    )
    tax: Optional[int] = Field(None, description='Tax in cents.')
    transitTime: Optional[str] = Field(
        None,
        description='Transit time. For instance, "three business days" is represented as `3bd`.',
    )


class ItemPurchaseCondition(BaseModel):
    id: Optional[str] = Field(None, description='Item ID.')
    listPrice: Optional[int] = Field(None, description='List price in cents.')
    price: Optional[int] = Field(None, description='Price in cents.')
    seller: Optional[str] = Field(None, description='Seller.')
    sellerChain: Optional[List] = Field(
        None,
        description='Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/en/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.',
    )
    slas: Optional[List[Sla]] = Field(
        None, description='Information on available SLAs.'
    )


class PurchaseConditions(BaseModel):
    itemPurchaseConditions: Optional[List[ItemPurchaseCondition]] = Field(
        None,
        description='List of objects containing purchase condition information on each item in the order.',
    )


class Sla1(BaseModel):
    availableDeliveryWindows: Optional[AvailableDeliveryWindows] = Field(
        None,
        description='This object contains information about the delivery window available to the shopper.',
    )
    deliveryChannel: Optional[str] = Field(None, description='Delivery channel.')
    deliveryIds: Optional[List[DeliveryId]] = Field(
        None, description='Information on each delivery ID.'
    )
    deliveryWindow: Optional[DeliveryWindow1] = Field(
        None,
        description='In case of scheduled delivery, this object will contain information on the delivery window selected by the shopper.',
    )
    id: Optional[str] = Field(None, description='SLA ID.')
    listPrice: Optional[int] = Field(None, description='List price in cents.')
    lockTTL: Optional[str] = Field(None, description='Estimate date of delivery.')
    name: Optional[str] = Field(None, description='SLA name.')
    pickupDistance: Optional[int] = Field(None, description='Pickup point distance.')
    pickupPointId: Optional[str] = Field(None, description='Pickup point ID.')
    pickupStoreInfo: Optional[PickupStoreInfo] = Field(
        None, description='Information on the pickup store.'
    )
    polygonName: Optional[str] = Field(None, description='Polygon name.')
    price: Optional[int] = Field(None, description='Price in cents.')
    shippingEstimate: Optional[str] = Field(
        None,
        description='Shipping estimate. For instance, "three business days" will be represented as `3bd`.',
    )
    shippingEstimateDate: Optional[str] = Field(
        None, description='Shipping estimate date.'
    )
    tax: Optional[int] = Field(None, description='Tax in cents.')
    transitTime: Optional[str] = Field(
        None,
        description='Transit time. For instance, "three business days" is represented as `3bd`.',
    )


class Total(BaseModel):
    id: Optional[str] = Field(None, description='Total ID.')
    name: Optional[str] = Field(None, description='Total name.')
    value: Optional[int] = Field(None, description='Total value.')


class LogisticsInfoItem1(BaseModel):
    addressId: Optional[str] = Field(None, description='Address ID.')
    deliveryChannels: Optional[List[DeliveryChannel]] = Field(
        None, description='List of available delivery channels.'
    )
    itemIndex: Optional[int] = Field(None, description='Index of item in items array.')
    itemMetadata: Optional[ItemMetadata] = Field(None, description='Item metadata.')
    messages: Optional[List] = Field(
        None,
        description='Array containing an object for each message generated by our servers while processing the request.',
    )
    pickupPoints: Optional[List] = Field(
        None, description='Array containing pickup points information.'
    )
    purchaseConditions: Optional[PurchaseConditions] = Field(
        None, description='Purchase conditions information.'
    )
    quantity: Optional[int] = Field(None, description='Quantity.')
    selectedDeliveryChannel: Optional[str] = Field(
        None,
        description='Delivery channel selected by the customer. For example, `"delivery"` or `"pickup-in-point"`.',
    )
    selectedSla: Optional[str] = Field(
        None, description='Selected SLA. For example, `"normal"` or `"express"`.'
    )
    shipsTo: Optional[List] = Field(
        None, description='List of countries that the item may be shipped to.'
    )
    slas: Optional[List[Sla1]] = Field(
        None, description='Information on available SLAs.'
    )
    subscriptionData: Optional[Dict[str, Any]] = Field(
        None, description='Subscription information.'
    )
    totals: Optional[List[Total]] = Field(
        None, description='Information on order totals.'
    )


class Installments(BaseModel):
    count: Optional[int] = Field(None, description='Count information.')
    hasInterestRate: Optional[bool] = Field(
        None, description='Indicates whether the payment has interest.'
    )
    interestRate: Optional[int] = Field(None, description='Interest rate value.')
    sellerMerchantInstallments: Optional[List] = Field(
        None, description='Seller merchant installments information.'
    )
    total: Optional[int] = Field(
        None,
        description='Total value of the order without separating cents. For example, $24.99 is represented `2499`.',
    )
    value: Optional[int] = Field(
        None,
        description='Value of the order without the interest rate. The value is shown without separating cents.',
    )


class InstallmentOptions(BaseModel):
    bin: Optional[str] = Field(None, description='Bin.')
    installments: Optional[Union[List, Installments]] = Field(
        None, description='Installments information.'
    )
    paymentGroupName: Optional[str] = Field(None, description='Payment group name.')
    paymentName: Optional[str] = Field(None, description='Payment name.')
    paymentSystem: Optional[int] = Field(
        None, description='Payment system identification.'
    )
    value: Optional[int] = Field(
        None, description='Total value assigned to this payment.'
    )


class PaymentSystem(BaseModel):
    availablePayments: Optional[str] = Field(
        None, description='Availability of payment.'
    )
    description: Optional[str] = Field(None, description='Description.')
    displayDocument: Optional[bool] = Field(
        None, description='Indicates whether a document is shown.'
    )
    dueDate: Optional[str] = Field(None, description='Payment due date.')
    groupName: Optional[str] = Field(None, description='Payment group name.')
    id: Optional[int] = Field(None, description='Payment system ID.')
    isCustom: Optional[bool] = Field(
        None, description='Indicates whether it is custom.'
    )
    name: Optional[str] = Field(None, description='Payment system name.')
    requiresAuthentication: Optional[bool] = Field(
        None, description='Indicates whether a authentication is required.'
    )
    requiresDocument: Optional[bool] = Field(
        None, description='Indicates whether a document is required.'
    )
    stringId: Optional[str] = Field(None, description='String ID.')
    template: Optional[str] = Field(None, description='Template.')
    validator: Optional[Dict[str, Any]] = Field(
        None, description='Payment system validator.'
    )


class PaymentData(BaseModel):
    availableAccounts: Optional[List] = Field(None, description='Available accounts.')
    availableAssociations: Optional[Dict[str, Any]] = Field(
        None, description='Available associations.'
    )
    availableTokens: Optional[List] = Field(None, description='Available tokens.')
    giftCardMessages: Optional[List] = Field(
        None, description='Array of gift card messages.'
    )
    giftCards: Optional[List] = Field(
        None, description='Gift card information, if it applies to the order.'
    )
    installmentOptions: Optional[Union[List, InstallmentOptions]] = Field(
        None, description='Installment options information.'
    )
    paymentSystems: Optional[List[PaymentSystem]] = Field(
        None, description='Information on payment systems.'
    )
    payments: Optional[List] = Field(None, description='Information on each payment.')


class RatesAndBenefitsData(BaseModel):
    rateAndBenefitsIdentifiers: Optional[List] = Field(
        None, description='List with rates and benefits identifiers.'
    )
    teaser: Optional[List] = Field(
        None, description='List with rates and benefits teasers.'
    )


class ApiCheckoutPubOrderFormsSimulationPostResponse(BaseModel):
    country: Optional[str] = Field(
        None,
        description='Three letter ISO code of the country of the shipping address.',
    )
    items: Optional[List[Item3]] = Field(
        None, description='Information on each item in the cart.'
    )
    logisticsInfo: Optional[List[LogisticsInfoItem1]] = Field(
        None,
        description='Array with logistics information on each item of the `items` array in the `orderForm`.',
    )
    marketingData: Optional[Dict[str, Any]] = Field(
        None,
        description='Object containing promotion data such as coupon tracking information and internal or external UTMs.',
    )
    paymentData: Optional[PaymentData] = Field(
        None, description='Payment data information.'
    )
    postalCode: Optional[str] = Field(None, description='Postal Code.')
    ratesAndBenefitsData: Optional[RatesAndBenefitsData] = Field(
        None, description='Information on rates and benefits that apply to the order.'
    )
    selectableGifts: Optional[List] = Field(
        None, description='Array containing the data of the item selected as a gift.'
    )


class FieldFulfillmentEndpointPvtOrderFormsSimulationPostRequest(BaseModel):
    country: Optional[str] = Field(
        None,
        description='ISO 3-digit code of the country where the delivery address is located.  This field is mandatory, for shopping carts simulations, where both Country and Postal Code are required. This field should be sent as `null` for storefront simulations, where the information is not necessary.',
        examples=['USA'],
    )
    geoCoordinates: Optional[List[str]] = Field(
        None,
        description='Geographic coordinates of the delivery address. This may be used instead of the postalCode, in case the marketplace is configured to accept geolocation. Example of value: `[-22.9443504,-43.1825635]`.',
    )
    items: Optional[List[FulfillmentItem]] = Field(
        None, description='Array containing the cart items.'
    )
    postalCode: str = Field(
        ...,
        description='Delivery address postal code. This field is mandatory for shopping carts simulations, where both Country and Postal Code are required. This field should be sent as `null` for storefront simulations, where the information is not necessary.',
        examples=['12345678'],
    )
    sc: Optional[str] = Field(
        None,
        description='Sales channel (or [trade policy](https://help.vtex.com/en/tutorial/como-funciona-uma-politica-comercial--6Xef8PZiFm40kg2STrMkMV#master-data)) associated to the seller account created.',
        examples=['1'],
    )


class Offering(BaseModel):
    id: str = Field(..., description='Service ID.', examples=['5'], title='id')
    name: str = Field(
        ..., description='Service name.', examples=['1 year warranty'], title='name'
    )
    price: int = Field(
        ...,
        description='Service price. The last two digits are the cents.',
        examples=[10000],
        title='price',
    )
    type: str = Field(
        ..., description='Type of the service.', examples=['Warranty'], title='type'
    )


class Item5(BaseModel):
    id: str = Field(..., description='SKU ID', examples=['2000037'], title='id')
    listPrice: int = Field(
        ...,
        description='List price. It’s the amount presented to the customer as a “previous” price that has been lowered due to a discount. Don’t separate the decimal places. The last two digits are the cents.',
        examples=[67203],
        title='listPrice',
    )
    measurementUnit: str = Field(
        ...,
        description='SKU’s measurement unit.',
        examples=['un'],
        title='measurementUnit',
    )
    merchantName: str = Field(
        ...,
        description='Name of the marketplace, used to guide payments. This field should be nulled if the marketplace is responsible for processing payments. Check out our [\u200b\u200bPayments in VTEX marketplaces](https://help.vtex.com/en/tutorial/payments-in-vtex-marketplaces--2kYOfWCZYweJkYl18bw9yD) article to know more.',
        examples=['mySeller1'],
        title='merchantName',
    )
    offerings: List[Offering] = Field(
        ...,
        description='Services that may be offered for this SKU. example are the assembly of a piece of furniture or warranty. In case these information are sent, the following fields are mandatory. If you don’t want to send it, use an empty array.',
        examples=[
            [{'id': '5', 'name': '1 year warranty', 'price': 10000, 'type': 'Warranty'}]
        ],
        title='offerings',
    )
    price: int = Field(
        ...,
        description='Actual selling price of the SKU. Don’t separate the decimal places. The last two digits are the cents.',
        examples=[67203],
        title='price',
    )
    priceTags: List[str] = Field(
        ...,
        description='List with the promotions applied to the SKU.',
        title='priceTags',
    )
    priceValidUntil: str = Field(
        ...,
        description='Expiration date of the SKU price. Example: `2014-03-01T22:58:28.143`. In case you don’t want to send it, use the value null.',
        examples=['2014-03-01T22:58:28.143'],
        title='priceValidUntil',
    )
    quantity: int = Field(
        ...,
        description='Quantity of the item. The seller should send the quantity that was indicated in the request, or the maximum quantity possible.',
        examples=[1],
        title='quantity',
    )
    requestIndex: int = Field(
        ...,
        description='Position of this item in the original array (request).',
        examples=[0],
        title='requestIndex',
    )
    seller: str = Field(
        ...,
        description='ID of the seller as registered in VTEX. You should send the same value that came in the request.',
        examples=['1'],
        title='seller',
    )
    unitMultiplier: int = Field(
        ...,
        description='SKU unit multiplier. The default value is 1.',
        examples=[1],
        title='unitMultiplier',
    )


class DeliveryChannel1(BaseModel):
    id: str = Field(
        ...,
        description='Identifies the channel type whose stock balance will be informed in the next field. Possible values are: pickup-in-point for pickup point and delivery for regular delivery.',
        examples=['pickup-in-point'],
        title='id',
    )
    stockBalance: int = Field(
        ...,
        description='Stock balance for the channel type selected in the previous field.',
        examples=[20],
        title='stockBalance',
    )


class AvailableDeliveryWindow(BaseModel):
    endDateUtc: str = Field(
        ...,
        description='End date of the delivery window.',
        examples=['2013-02-04T13:00:00+00:00'],
        title='endDateUtc',
    )
    price: int = Field(
        ...,
        description='Extra price for scheduled delivery. The last two digits are the cents.',
        examples=[0],
        title='price',
    )
    startDateUtc: str = Field(
        ...,
        description='Start date of the delivery window.',
        examples=['2013-02-04T08:00:00+00:00'],
        title='startDateUtc',
    )


class Address1(BaseModel):
    addressId: str = Field(
        ...,
        description='Identifies the pickup point.',
        examples=['548304ed-dd40-4416-b12b-4b32bfa7b1e0'],
        title='addressId',
    )
    addressType: str = Field(
        ...,
        description='The possible value is pickup.',
        examples=['pickup'],
        title=' addressType',
    )
    city: str = Field(
        ...,
        description="Pickup point's city.",
        examples=['Rio de Janeiro'],
        title='city',
    )
    complement: str = Field(
        ...,
        description='Complement of the pickup point address.',
        examples=['2nd floor'],
        title='complement',
    )
    country: str = Field(
        ...,
        description='3-digit ISO code of the country where the pickup point is located.',
        examples=['BRA'],
        title='country',
    )
    geoCoordinates: List[float] = Field(
        ...,
        description='Contains the geographic coordinates of the pickup point.',
        examples=[[-49.334934, 25.401705]],
        title='geoCoordinates',
    )
    neighborhood: str = Field(
        ...,
        description='Neighborhood where the pickup point is located.',
        examples=['Botafogo'],
        title='neighborhood',
    )
    number: str = Field(
        ...,
        description='Address number of the pickup point.',
        examples=['100'],
        title='number',
    )
    postalCode: str = Field(
        ...,
        description='Postal code of the pickup point. This field is mandatory, for shopping carts simulations, where both Country and Postal Code are required. This field should be sent as `null` for storefront simulations, where the information is not necessary.',
        examples=['82320-040'],
        title='postalCode',
    )
    receiverName: str = Field(
        ...,
        description='Name of the person who will receive the product. May be sent as `null`.',
        examples=['Juliana'],
        title='receiverName',
    )
    reference: str = Field(
        ...,
        description='A reference for the pickup point address. ',
        examples=['Right next to the Unicorn statue.'],
        title='reference',
    )
    state: str = Field(
        ..., description="Pickup point's state.", examples=['RJ'], title='state'
    )
    street: str = Field(
        ...,
        description='Street where the pickup point is located.',
        examples=['Rua Praia de Botafogo'],
        title='street',
    )


class PickupStoreInfo2(BaseModel):
    additionalInfo: str = Field(
        ...,
        description='Description or extra information about the pickup point.',
        examples=['Pick up your order at the cashier.'],
        title='additionalInfo',
    )
    address: Address1 = Field(
        ...,
        description='Address data of the pickup point.',
        examples=[
            {
                'addressId': '548304ed-dd40-4416-b12b-4b32bfa7b1e0',
                'addressType': 'pickup',
                'city': 'Curitiba',
                'complement': 'Loja 10',
                'country': 'BRA',
                'geoCoordinates': [49.334934, 25.401705],
                'neighborhood': 'Santa Felicidade',
                'number': '100',
                'postalCode': '82320-040',
                'receiverName': 'Juliana',
                'reference': 'Right next to the Unicorn statue.',
                'state': 'PR',
                'street': 'Rua Domingos Strapasson',
            }
        ],
        title='address',
    )
    friendlyName: str = Field(
        ...,
        description='Friendly name of the pickup point.',
        examples=['Store ABC'],
        title='friendlyName',
    )
    isPickupStore: bool = Field(
        ...,
        description='`true` if it is a pickup point.',
        examples=[True],
        title='isPickupStore',
    )


class Sla2(BaseModel):
    availableDeliveryWindows: List[AvailableDeliveryWindow] = Field(
        ...,
        description='Contains the delivery windows available for the SLA.',
        examples=[
            [
                {
                    'endDateUtc': '2013-02-04T13:00:00+00:00',
                    'price': 0,
                    'startDateUtc': '2013-02-04T08:00:00+00:00',
                },
                {
                    'endDateUtc': '2014-02-04T13:00:00+00:00',
                    'price': 100,
                    'startDateUtc': '2014-02-04T08:00:00+00:00',
                },
            ]
        ],
        title='availableDeliveryWindows',
    )
    deliveryChannel: str = Field(
        ...,
        description='Type of delivery channel. The values that are possible are: `pickup-in-point` for pickup point and `delivery` for regular delivery.',
        examples=['pickup-in-point'],
        title='deliveryChannel',
    )
    id: str = Field(
        ...,
        description='Identifier of the delivery method.',
        examples=['Curbside pickup'],
        title='id',
    )
    name: str = Field(
        ...,
        description='Name of the delivery method.',
        examples=['Curbside pickup'],
        title='name',
    )
    pickupStoreInfo: PickupStoreInfo2 = Field(
        ...,
        description='Contains the data about the pickup point. If you don’t want to send this, use the value `null`.',
        examples=[
            {
                'additionalInfo': '',
                'address': {
                    'addressId': '548304ed-dd40-4416-b12b-4b32bfa7b1e0',
                    'addressType': 'pickup',
                    'city': 'Curitiba',
                    'complement': 'Loja 10',
                    'country': 'BRA',
                    'geoCoordinates': [49.334934, 25.401705],
                    'neighborhood': 'Santa Felicidade',
                    'number': '100',
                    'postalCode': '82320-040',
                    'receiverName': 'Juliana',
                    'reference': 'Right next to the Unicorn statue.',
                    'state': 'PR',
                    'street': 'Rua Domingos Strapasson',
                },
                'friendlyName': 'Santa Felicidade',
                'isPickupStore': True,
            }
        ],
        title='pickupStoreInfo',
    )
    price: int = Field(
        ...,
        description='Delivery price. The two last digits are the cents.',
        examples=[846],
        title='price',
    )
    shippingEstimate: str = Field(
        ...,
        description='Time estimated for the delivery. Possible suffixes are `bd` for *business day* , `h` for *hours*, and `m` for *minutes*.',
        examples=['19bd'],
        title='shippingEstimate',
    )


class LogisticsInfoItem2(BaseModel):
    deliveryChannels: List[DeliveryChannel1] = Field(
        ...,
        description='Array contains the stock balance for each channel.',
        examples=[
            [
                {'id': 'delivery', 'stockBalance': 179},
                {'id': 'pickup-in-point', 'stockBalance': 20},
            ]
        ],
        title='deliveryChannels',
    )
    itemIndex: int = Field(
        ...,
        description='Position of this item in the original array, i.e., in the array that came with the request. This index is what identifies which SKU you are referring to for each object inside the logisticsInfo.',
        examples=[0],
        title='itemIndex',
    )
    quantity: int = Field(
        ...,
        description='Quantity of the item. The seller should send the quantity that was indicated in the request, or the maximum quantity possible.',
        examples=[1],
        title='quantity',
    )
    shipsTo: List[str] = Field(
        ...,
        description='ISO 3-digit code of the countries to where the SKU is delivered.',
        examples=[['BRA', 'BOL']],
        title='shipsTo',
    )
    slas: List[Sla2] = Field(
        ...,
        description='Contains the available delivery methods.',
        examples=[
            [
                {
                    'availableDeliveryWindows': [
                        {
                            'endDateUtc': '2013-02-04T13:00:00+00:00',
                            'price': 0,
                            'startDateUtc': '2013-02-04T08:00:00+00:00',
                        }
                    ],
                    'deliveryChannel': 'pickup-in-point',
                    'id': 'Curbside pickup',
                    'name': 'Curbside pickup',
                    'pickupStoreInfo': {
                        'additionalInfo': '',
                        'address': {
                            'addressId': '548304ed-dd40-4416-b12b-4b32bfa7b1e0',
                            'addressType': 'pickup',
                            'city': 'Curitiba',
                            'complement': 'Loja 10',
                            'country': 'BRA',
                            'geoCoordinates': [49.334934, 25.401705],
                            'neighborhood': 'Santa Felicidade',
                            'number': '100',
                            'postalCode': '82320-040',
                            'receiverName': 'Juliana',
                            'reference': 'Right next to the Unicorn statue.',
                            'state': 'PR',
                            'street': 'Rua Domingos Strapasson',
                        },
                        'friendlyName': 'Santa Felicidade',
                        'isPickupStore': True,
                    },
                    'price': 0,
                    'shippingEstimate': '0bd',
                }
            ]
        ],
        title='slas',
    )
    stockBalance: int = Field(
        ...,
        description='Stock balance of the SKU.',
        examples=[199],
        title='stockBalance',
    )


class FieldFulfillmentEndpointPvtOrderFormsSimulationPostResponse(BaseModel):
    country: str = Field(
        ...,
        description='ISO 3-digit code of the country where the delivery address is located. If you don’t want to send it, use the value null.',
        examples=['BRA'],
        title='Country',
    )
    items: List[Item5] = Field(
        ...,
        description='Contains the data about each SKU in the cart.',
        examples=[
            [
                {
                    'id': '2000037',
                    'listPrice': 67203,
                    'measurementUnit': 'un',
                    'merchantName': 'mySeller1',
                    'offerings': [
                        {
                            'id': '5',
                            'name': '1 year warranty',
                            'price': 10000,
                            'type': 'Warranty',
                        }
                    ],
                    'price': 67203,
                    'priceTags': [],
                    'priceValidUntil': '2014-03-01T22:58:28.143',
                    'quantity': 1,
                    'requestIndex': 0,
                    'seller': '1',
                    'unitMultiplier': 1,
                }
            ]
        ],
        title='Items',
    )
    logisticsInfo: List[LogisticsInfoItem2] = Field(
        ...,
        description='Array that contains the data regarding the delivery methods and stock for each item. If all products are unavailable, this field should return empty.',
        examples=[
            [
                {
                    'deliveryChannels': [
                        {'id': 'delivery', 'stockBalance': 179},
                        {'id': 'pickup-in-point', 'stockBalance': 20},
                    ],
                    'itemIndex': 0,
                    'quantity': 1,
                    'shipsTo': ['BRA'],
                    'slas': [
                        {
                            'availableDeliveryWindows': [
                                {
                                    'endDateUtc': '2013-02-04T13:00:00+00:00',
                                    'price': 0,
                                    'startDateUtc': '2013-02-04T08:00:00+00:00',
                                }
                            ],
                            'deliveryChannel': 'pickup-in-point',
                            'id': 'Curbside pickup',
                            'name': 'Curbside pickup',
                            'pickupStoreInfo': {
                                'additionalInfo': '',
                                'address': {
                                    'addressId': '548304ed-dd40-4416-b12b-4b32bfa7b1e0',
                                    'addressType': 'pickup',
                                    'city': 'Curitiba',
                                    'complement': 'Loja 10',
                                    'country': 'BRA',
                                    'geoCoordinates': [49.334934, 25.401705],
                                    'neighborhood': 'Santa Felicidade',
                                    'number': '100',
                                    'postalCode': '82320-040',
                                    'receiverName': None,
                                    'reference': None,
                                    'state': 'PR',
                                    'street': 'Rua Domingos Strapasson',
                                },
                                'friendlyName': 'Santa Felicidade',
                                'isPickupStore': True,
                            },
                            'price': 0,
                            'shippingEstimate': '0bd',
                        }
                    ],
                    'stockBalance': 199,
                }
            ]
        ],
        title='logisticsInfo',
    )
    postalCode: str = Field(
        ...,
        description='Postal code of the delivery address. This field is mandatory, for shopping carts simulations, where both Country and Postal Code are required. This field should be sent as `null` for storefront simulations, where the information is not necessary.',
        examples=['80250000'],
        title='postalCode',
    )


class FieldFulfillmentEndpointPvtOrdersOrderIdCancelPostRequest(BaseModel):
    marketplaceOrderId: str = Field(
        ...,
        description='Identifies the order. The seller should use this ID to trigger the cancellation of the corresponding order.',
    )


class FieldFulfillmentEndpointPvtOrdersSellerOrderIdFulfillPostRequest(BaseModel):
    marketplaceOrderId: str = Field(
        ...,
        description='Identifies the order. The seller should use this ID to trigger the fulfillment process of the corresponding order.',
        examples=['1138342255777-01'],
    )


class FieldMarketplaceServicesEndpointPvtOrdersMarketplaceOrderIdCancelPostRequest(
    BaseModel
):
    reason: str = Field(
        ...,
        description="Insert here the reason for the order's cancellation.",
        examples=['Product is unavailable'],
    )


class Item6(BaseModel):
    id: str = Field(..., description='SKU ID.', examples=['6'])
    price: int = Field(..., description='Price of the item.', examples=[5500])
    quantity: int = Field(
        ..., description='Quantity of items of the SKU in the cart.', examples=[1]
    )


class FieldMarketplaceServicesEndpointPvtOrdersMarketplaceOrderIdInvoicePostRequest(
    BaseModel
):
    courier: Optional[str] = Field(
        None,
        description='Courier, if available on invoice.',
        examples=['courier-example'],
    )
    invoiceNumber: str = Field(
        ..., description='Invoice number', examples=['NFe-00002']
    )
    invoiceValue: Optional[int] = Field(
        None, description='Invoice value.', examples=[6000]
    )
    issuanceDate: Optional[str] = Field(
        None, description='Issuance date.', examples=['2021-05-21T10:00:00']
    )
    items: List[Item6] = Field(..., description='Array containing the order items.')
    trackingNumber: Optional[str] = Field(
        None, description='Tracking number.', examples=['12345678abc']
    )
    trackingUrl: Optional[str] = Field(
        None,
        description='Tracking URL.',
        examples=['https://courier-example.com/tracking'],
    )
    type: str = Field(
        ...,
        description='Indicates the type of the invoice. Use `"Output"` for regular orders and `"Input"` for returns.',
        examples=['Output'],
    )


class FieldMarketplaceServicesEndpointPvtOrdersMarketplaceOrderIdInvoiceInvoiceNumberPostRequest(
    BaseModel
):
    courier: Optional[str] = Field(
        None, description='Courier.', examples=['courier-example']
    )
    dispatchedDate: Optional[str] = Field(
        None, description='Date of order dispatch.', examples=['2021-06-09']
    )
    trackingNumber: Optional[str] = Field(
        None, description='Tracking number.', examples=['12345678abc']
    )
    trackingUrl: Optional[str] = Field(
        None,
        description='Tracking URL.',
        examples=['https://courier-example.com/tracking'],
    )


class Event(BaseModel):
    city: Optional[str] = Field(
        None, description='City where the event ocurred.', examples=['Rio de Janeiro']
    )
    date: Optional[str] = Field(
        None, description='Date when event ocurred.', examples=['2021-03-16']
    )
    description: Optional[str] = Field(
        None, description='Description of the event.', examples=['Order delivered.']
    )
    state: Optional[str] = Field(
        None, description='State where the event ocurred.', examples=['Rio de Janeiro']
    )


class FieldMarketplaceServicesEndpointPvtOrdersMarketplaceOrderIdInvoiceInvoiceNumberTrackingPostRequest(
    BaseModel
):
    events: Optional[List[Event]] = Field(
        None,
        description='Array containing information on each tracking event received.',
    )
    isDelivered: bool = Field(
        ...,
        description='Indicates if order has been delivered. `false` if it is in transit.',
        examples=[True],
    )


class CustomApp(BaseModel):
    fields: FieldsModel
    id: str = Field(..., description="App's ID.", examples=['ID'], title='id')
    major: int = Field(
        ...,
        description='Integer with the major version of the app. Optional, defaulting to one.',
        examples=[1],
        title='major',
    )


class CustomData(BaseModel):
    customApps: List[CustomApp] = Field(..., description='')


class InvoiceData(BaseModel):
    userPaymentInfo: UserPaymentInfo


class EnqueueNewOrderRequest(BaseModel):
    allowFranchises: bool = Field(
        ...,
        description='Boolean indicating whether franchise accounts linked to the main seller should be considered. That is, if the order delivery pickup/SLA can belong to a [franchise account](https://help.vtex.com/en/tutorial/what-is-a-franchise-account--kWQC6RkFSCUFGgY5gSjdl), for example. This field is optional and defaults to `false`.',
        examples=[False],
        title='allowFranchises',
    )
    clientProfileData: ClientProfileData
    connectorEndpoint: Optional[str] = Field(
        None,
        description="String with the connector's base endpoint that will receive notifications about the orders processing results, as well as status updates from VTEX OMS. This field accepts query strings. You can use the models below:  \n\n- `https://{{externalconnector}}.com`  \n\n- `https://{{externalconnector.com}}/api/vtex` if you additionaly want to send a relative URL with the endpoint. \n\nThis field is optional if the connector uses the [App Template](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-app-template) and authenticates on our request via `VtexIdclientAutCookie`.  \n\nIt is required if the connector is native or does not use the App Template.",
        examples=['https://{{externalconnector.com}}/api/vtex'],
        title='connectorEndpoint',
    )
    connectorName: Optional[str] = Field(
        None,
        description='String with the identifier code of the connector responsible for the order.  \n\nThis field is optional if the connector uses the [App Template](https://developers.vtex.com/vtex-rest-api/docs/external-marketplace-integration-app-template) and authenticates on our request via `VtexIdclientAutCookie`.  \n\nIt is required if the connector is native or does not use the App Template.',
        examples=['connectorName'],
        title='connectorName',
    )
    customData: Optional[CustomData] = None
    invoiceData: InvoiceData
    items: List[Item]
    marketplaceOrderId: str = Field(
        ...,
        description="String that indicates the order's ID in the marketplace.",
        examples=['7e62fcd3-827b-400d-be8a-f050a79c4976'],
        title='marketplaceOrderId',
    )
    marketplaceOrderStatus: str = Field(
        ...,
        description='Required field including a string with the order’s status in the marketplace. If you send an order with the status APPROVED to integrate, our service will automatically try to advance it’s status in VTEX after integrating it. This field accepts the following values:  \n\n- `new`  \n\n- `approved`',
        examples=['new'],
        title='marketplaceOrderStatus',
    )
    marketplacePaymentValue: int = Field(
        ...,
        description='Integer that indicates the order’s total value, which the marketplace will pay to the seller. It’s important to note that this value should include interest, if that’s the case. If the value is `USD110.50`, convert it to the format → `11050`.',
        examples=[11050],
        title='marketplacePaymentValue',
    )
    pickupAccountName: Optional[str] = Field(
        None,
        description='String that indicates the name of the account responsible for the order’s pickup point. It is only required for pickup-in-point orders from franchise accounts, when franchise accounts `allowFranchises` is `true` and the order in question has a `pickup-in-point` delivery type. It is optional otherwise.',
        examples=['accountName'],
        title='pickupAccountName',
    )
    shippingData: ShippingData
